buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    }
}

//version "0.2.3"
group "cat.dipta.plugins"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.grails-plugin-publish"

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    console "org.grails:grails-console"
    profile "org.grails.profiles:plugin"
    provided "org.grails:grails-plugin-services"
    provided "org.grails:grails-plugin-domain-class"

    compile "org.grails.plugins:cache:4.0.0.M1"
    //compile "org.grails.plugins:cache:4.0.0"

    compile 'org.xbib.groovy:groovy-crypt:1.0.0'

    compileOnly 'org.infinispan:infinispan-core:8.2.4.Final'
    compileOnly 'org.infinispan:infinispan-commons:8.2.4.Final'

    testCompile "org.grails.plugins:gsp"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-plugin-testing"
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
}

// enable if you wish to package this plugin as a standalone application
bootRepackage.enabled = false


//Needed for Wildfly to load the infinispan dependencies
jar {
    manifest {
        attributes (
                'Dependencies': 'org.infinispan, org.infinispan.commons, org.jboss.as.clustering.infinispan export'
        )
    }
}

grailsPublish {
    // TODO: Provide values here
//    user = 'user'
//    key = 'key'
//    githubSlug = 'foo/bar'
//    license {
//        name = 'Apache-2.0'
//    }
    title = "Dipta Custom Cache"
    desc = "Custom implementation for grails cache plugin"
    developers = [ciq_aplicacions:"CIQ - Aplicacions"]
    vcsUrl = "https://github.com/DiptaCat/grails-cache-custom"
}


// https://stackoverflow.com/questions/34756023/how-do-i-publish-a-grails-3-plugin-to-my-local-nexus-repo

publishing {
    publications {
        mavenJar(MavenPublication) {
            pom.withXml {
                def pomNode = asNode()
                pomNode.dependencyManagement.replaceNode {}

                // simply remove dependencies without a version
                // version-less dependencies are handled with dependencyManagement
                // see https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/8 for more complete solutions
                pomNode.dependencies.dependency.findAll {
                    it.version.text().isEmpty()
                }.each {
                    it.replaceNode {}
                }
            }
            from components.java
        }
    }
    repositories {
        maven {
            credentials {
                username System.getenv('NEXUS_USER')
                password System.getenv('NEXUS_PASS')
            }
            def nexus_url = System.getenv('NEXUS_URL')
            if (project.version.endsWith('-SNAPSHOT')) {
                url nexus_url + '/snapshots/'
            } else {
                url nexus_url + '/releases/'
            }
        }
    }
}